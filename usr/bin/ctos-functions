#!/bin/bash

##  Some useful functions
##  Copy this script to your project folder
##  and add as 'source ctos-functions' then
##  just call the functions as normal.

##> Checks if the user is root and kills the script if it is not.
check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo "You need to run as ROOT, dummy!!!"
        exit 1
    fi
}

line_break() {
    local thChar=''
    local thSize=0
    if [ -z "$1" ]; then
        thChar='='
    else
        thChar=$1
    fi
    if [ -z "$2" ]; then
        thSize=46
    else
        thSize=$2
    fi
    echo "Line Char: $thChar"
    echo "Line size: $thSize"
    local thLine='<<'
    for ((i = 1; i <= $thSize; i++)); do
        echo "$i"
        thLine+=$thChar
    done
    thLine+='>>'
    echo "$thLine"
    #       ==============================================
}

##> Prints a goodbye message to the terminal and exits the script.
say_goodbye() {

    line_break '#' 10
    echo "Goodbye"
    line_break
}

##> Prints an Error message to the terminal and exits the script.
something_wrong() {
    line_break
    echo "Something went wrong!!"
    echo "The script cannot continue."
    echo "Please read the above messages"
    echo "to understand what caused the error."
    line_break
    say_goodbye
    exit 1
}

##  Not a working Directory
not_my_dir() {
    line_break
    echo "Make sure you are in the right directory."
    echo "Your current working directory is: $PWD"
    echo "Your requested directory is: $1"
    line_break
}

##  Tests if a directory location exists and if it is indeed a directory. This must be passed a string of the location.
test_location() {
    echo "Checking to see if the folder exists in the given path."
    line_break
    if !( [ -e "$1"  ] ); then
        echo "You should create the directory"
        not_my_dir $1
        return 1
    else
        echo "The location exists"
        if !( [ -d  "$1" ] ); then
            echo "Exists, but is not a directory"
            not_my_dir $1
            return 1
        else
            echo "Is a directory"
            return 0
        fi
    fi
}

##  Finds the old packages and deletes them.
find_old_pkgs() {
    ##  Fill array
    local thFiles=()
    local thLocation=$1
    local thPrefix=$2
    local thExtention=$3
    echo "The Path: " $thLocation
    echo "The Prefix: " $thPrefix
    echo "The Extention: " $thExtention
    newFileLocation=$(ls -t $thLocation$thPrefix*.$thExtention | head -1)
    line_break
    newFile=${newFileLocation##*/}
    echo "Here is the newest file: " $newFile
    for f in $thLocation$thPrefix*.$thExtention; do
        fileName=${f##*/}
        if [ "$fileName" != "$newFile" ]; then
            thFiles+=($fileName)
        fi
    done
    line_break
    echo "Here are all the $thExtention files apart from the newest one."
    echo "Total files for $thExtention: ${#thFiles[@]}"
    count=0
    for i in "${thFiles[@]}"; do
        echo "File $((count + 1)): "$i
        ((count++))
    done
    line_break
    echo "Do you want to delete them?"
    #to_continue
    line_break
    for i in "${thFiles[@]}"; do
        echo "Deleting file $((count + 1)): "$i
        rm $thLocation$i
        ((count++))
    done
}

##> This function asks the user if they want to continue or not.
to_continue() {
    while true; do

        read -p "Yes or No? (y/n) " yn

        case $yn in
        yes)
            echo ok, we will proceed
            break
            ;;
        y)
            echo ok, we will proceed
            break
            ;;
        Y)
            echo ok, we will proceed
            break
            ;;
        no)
            say_goodbye
            exit 0
            ;;
        n)
            say_goodbye
            exit 0
            ;;
        N)
            say_goodbye
            exit 0
            ;;
        *) echo invalid response ;;
        esac

    done
}
