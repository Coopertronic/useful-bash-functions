#!/bin/bash

##  Some useful functions
##  Copy this script to your project folder
##  and add as 'source ctos-functions' then
##  just call the functions as normal.

##> Checks if the user is root and kills the script if it is not.
check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo "You need to run as ROOT, dummy!!!"
        exit 1
    fi
}

##> Prints a goodbye message to the terminal and exits the script.
say_goodbye() {
    lineBreak="<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>"
    #clear
    echo $lineBreak
    echo "Goodbye"
    echo $lineBreak
}

##> Prints an Error message to the terminal and exits the script.
something_wrong() {
    lineBreak="<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>"
    echo $lineBreak
    echo "Something went wrong!!"
    echo "The script cannot continue."
    echo "Please read the above messages"
    echo "to understand what caused the error."
    echo $lineBreak
    say_goodbye
    exit 1
}

##  Not a working Directory
not_my_dir() {
    lineBreak="<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>"
    echo $lineBreak
    echo "Make sure you are in the right directory."
    echo "Your current working directory is: $PWD"
    echo $lineBreak
}

##  Tests if a directory location exists and if it is indeed a directory. This must be passed a string of the location.
test_location() {
    lineBreak="<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>"
    echo "Checking to see if the folder exists in the given path."
    echo $lineBreak
    if !( [ -e "$1"  ] ); then
        echo "You should create the directory"
        not_my_dir
        return 1
    else
        echo "The location exists"
        if !( [ -d  "$1" ] ); then
            echo "Exists, but is not a directory"
            not_my_dir
            return 1
        else
            echo "Is a directory"
            return 0
        fi
    fi
}

##  Find newest file by Prefix and extention.
##  Function needs 3 strings. 1) the path or location of the files. 2) The Prefix to search by. 3) the extention to search by.
find_old_pkgs() {
    lineBreak="<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>"
    declare -n thFiles=$1
    thLocation=$2
    thPrefix=$3
    thExtention=$4
    thFiles=()
    echo "The Path: " $thLocation
    echo "The Prefix: " $thPrefix
    echo "The Extention: " $thExtention
    newFileLocation=$(ls -t $thLocation$thPrefix*.$thExtention | head -1)
    newFile=${newFileLocation##*/}
    echo "Here is the new file: " $newFile
    for f in $thLocation$thPrefix*.$thExtention; do
        fileName=${f##*/}
        if [ "$fileName" != "$newFile" ]; then
            thFiles+=($fileName)
        fi
    done
    echo $lineBreak
    echo "Here are all the $thExtention files apart from the newest one."
    echo "Total files in function: ${#thFiles[@]}"
    for i in "${thFiles[@]}"; do
        echo "File $i: {thFiles[$i]}"
    done
    echo
    echo "Save to file?"
    to_continue
    ##  write the array to a file in temp
    tempDir="/tmp/FOP/"
    tempFile="old-files.txt"
    dirExists=$(test_location $tempDir)
    echo "Is this the correct responce for test_location?"
    echo "dirExists=" $dirExists " DIRECT"
    echo "dirExists=$dirExists STRING"
    to_continue
    echo $lineBreak
    echo "Continuing to write file ..."
    echo $lineBreak
    ##  test if dir exists
    if [ $dirExists == 1 ]; then
        mkdir $tempDir
        echo "Created dir"
    fi
    printf "\n" {thFiles[@]} > $tempFile
    echo $lineBreak
    echo "Temp file written."
    echo $lineBreak
    to_continue
}

##  Surgest what to delete
##  Make list of files excluding the newest one

##> This function asks the user if they want to continue or not.
to_continue() {
    while true; do

        read -p "Yes or No? (y/n) " yn

        case $yn in
        yes)
            echo ok, we will proceed
            break
            ;;
        y)
            echo ok, we will proceed
            break
            ;;
        Y)
            echo ok, we will proceed
            break
            ;;
        no)
            say_goodbye
            exit 0
            ;;
        n)
            say_goodbye
            exit 0
            ;;
        N)
            say_goodbye
            exit 0
            ;;
        *) echo invalid response ;;
        esac

    done
}
